const Order = require('../models/OrderModel.js');

// Créer une nouvelle commande
exports.createOrder = async (req, res) => {
    try {
        const { userId, items, totalAmount } = req.body;
        const newOrder = new Order({ userId, items, totalAmount });
        const savedOrder = await newOrder.save();
        res.status(201).json(savedOrder);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la création de la commande.' });
    }
};

// Récupérer une commande spécifique par ID
exports.getOrderById = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id);
        if (!order) return res.status(404).json({ error: 'Commande non trouvée.' });
        res.json(order);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la récupération de la commande.' });
    }
};

// Récupérer toutes les commandes d'un utilisateur
exports.getOrdersByUser = async (req, res) => {
    try {
        const orders = await Order.find({ userId: req.params.userId });
        res.json(orders);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la récupération des commandes.' });
    }
};

// Mettre à jour le statut d'une commande
exports.updateOrderStatus = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id);
        if (!order) return res.status(404).json({ error: 'Commande non trouvée.' });

        order.status = req.body.status;
        const updatedOrder = await order.save();
        res.json(updatedOrder);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la mise à jour de la commande.' });
    }
};

// Annuler une commande
exports.cancelOrder = async (req, res) => {
    try {
        const order = await Order.findById(req.params.id);
        if (!order) return res.status(404).json({ error: 'Commande non trouvée.' });

        order.status = 'cancelled';
        const cancelledOrder = await order.save();
        res.json(cancelledOrder);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de l\'annulation de la commande.' });
    }
};
